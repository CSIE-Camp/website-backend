openapi: 3.0.3
info:
  title: NTNU CSIE Camp API Documentation
  description: |-
    NTNU CSIE Camp API documentation
    Note: Please remember to check for "token" in all response body. a new access_token will be returned IF the user's role has been changed while logged in.
    Some useful links:
    - [Backend repository](https://github.com/CSIE-Camp/website-backend)
    - [Camp website](https://camp.csie.cool)
    
  version: 1.0.0-oas3
servers:
  - url: https://server.com
tags:
  - name: Signup
  - name: Login
  - name: Profile
  - name: Admin
paths:
  /signp/email:
    post:
      tags:
        - Signup
      summary: First step of account creation
      description: The user should submit their email
      requestBody:
        description: Submits the user inputted email
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/signup_email"
      responses:
        "200":
          description: >-
            Successfully send verification email. Ask the user to verify their
            email
        "400":
          description: Password was null or empty
        "403":
          description: Email is in use
        "500":
          description: Unexpected errors
  /signp/password:
    post:
      tags:
        - Signup
      summary: Final step of account creation
      description: >-
        The user should submit their password. Passwords should be validated on
        the front end.
      security:
        - bearerAuth: []
      requestBody:
        description: >-
          The submitted data should be in a SHA512 hash.Passwords should be
          validated on the front end.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/signup_password"
      responses:
        "200":
          description: Successfully created the account. Ask the user to login
        "400":
          description: Password was null or empty
        "418":
          description: Provided password was not a hex digest of a SHA512 hash
        "500":
          description: Unexpected errors
  /login:
    post:
      tags:
        - Login
      summary: Login
      description: Logs in the user
      requestBody:
        description: >-
          The user should submit their email and password. Password should be
          the hex digest of a SHA512 hash of the inputted password
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/login"
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/login_response_success"
        "400":
          description: Invalid data
        "403":
          description: Account does not exist
        "418":
          description: Password was not a SHA512 hash
        "500":
          description: Unexpected error
    delete:
      tags:
        - Login
      summary: Log out
      description: Logs out the user
      requestBody:
        description: >-
          Put the access token in the Authorization header. Please be reminded
          to delete the access token and refresh token from the browser's
          storage
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/logout"
      responses:
        "200":
          description: Ok
        "400":
          description: Invalid data
        "403":
          description: Invalid token
        "401":
          description: Invalid token

  /login/refresh:
    post:
      tags:
        - Login
      summary: Refresh access token
      description: Refreshes the access token with refresh token
      requestBody:
        description: >-
          Submit the refresh token
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/refresh"
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/refresh_response_success"
  /login/password/reset:
    post:
      tags:
        - Login
      summary: For resetting password with email
      description: Link for resetting passwword will be sent after receiving email
      requestBody:
        description: >-
          Submit the email
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/password-reset"
      responses:
        "200":
          description: Ok
        "500":
          description: Unexpected error
  /login/password/update:
    post:
      tags:
        - Login
      summary: Set new password
      description: Submit email and new password to set the new password
      requestBody:
        description: >-
          Submit email and hashed new password
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/login"
      responses:
        "200":
          description: Ok
        "400":
          description: Invalid data
        "418":
          description: Provided password was not a hex digest of a SHA512 hash
        "500":
          description: Unexpected error
  /admin/view-profile/{id}:
    get:
      tags:
        - Admin
      summary: Go to users' profile
      description: Goes to requested users profile if you are an admin
      parameters:
        - in: path
          name: id
          required: true
          schema:
            $ref: "#/components/schemas/id"
          description: >-
            "null" or AccountId
      responses:
        "200":
          description: Ok
        "401":
          description: Insufficient privileges
  /admin/confirm-status:
    post:
      tags:
        - Admin
      summary: Modify application status
      description: Change target account's application status
      requestBody:
        description: >-
          Submit target account id and application status
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/application-status"
      responses:
        "200":
          description: Ok
        "401":
          description: Insufficient privileges
        "400":
          description: Invalid data
  /admin/confirm-payment:
    post:
      tags:
        - Admin
      summary: Modify payment status
      description: Change target account's payment status
      requestBody:
        description: >-
          Submit target account id
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/payment-status"
      responses:
        "200":
          description: Ok
        "401":
          description: Insufficient privileges or not enough arguments
        "400":
          description: Invalid data
  /admin/update-roles:
    post:
      tags:
        - Admin
      summary: Promote target account's role
      description: Promote account to staff or admin
      requestBody:
        description: >-
          Submit target account id and new role
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/update-role"
      responses:
        "200":
          description: Ok
        "400":
          description: Not enough arguments
        "403":
          description: Insufficient privileges, invalid role or changing role for self
  /admin/view-logs/{TargetAccount}:
    get:
      tags:
        - Admin
      summary: View logs for account
      description: Let admins view all logs for an account
      parameters:
        - in: path
          name: TargetAccount
          required: true
          schema:
            $ref: "#/components/schemas/id"
          description: AccountId
      responses:
        "200":
          description: Ok
        "403":
          description: Insufficient privileges
  /admin/get-camp-status:
    get:
      tags:
        - Admin
      summary: Get status of camp
      description: Get status of camp
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/camp-status"
  /admin/edit-camp-status:
    post:
      tags:
        - Admin
      summary: Change status of camp
      description: Change status of camp
      requestBody:
        description: >-
          Submit new status
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/camp-status"
      responses:
        "200":
          description: Ok
        "403":
          description: Insufficient privileges
  /admin/search:
    post:
      tags:
        - Admin
      summary: Search for participant
      description: Search for a specific participant's or everyone's data
      requestBody:
        description: >-
          Submit name for specific participant or "" for everyone
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/search"
      responses:
        "200":
          description: Ok
        "403":
          description: Insufficient privileges
  /profile:
    get:
      tags:
        - Profile
      summary: Get users profile
      description: Get profile of the user themself
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/profile-get"
  /profile/update:
    post:
      tags:
        - Profile
      summary: Updates user's profile
      description: Submit new profile to update
      requestBody:
        description: >-
          Submit profile
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/profile"
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/update-profile-response"
        "403":
          description: Application service unavailable

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: Bearer
      bearerFormat: JWT
  schemas:
    signup_email:
      type: object
      properties:
        email:
          type: string
          example: test@example.com
    signup_password:
      type: object
      properties:
        password:
          type: string
          example: >-
            bed4efa1d4fdbd954bd3705d6a2a78270ec9a52ecfbfb010c61862af5c76af1761ffeb1aef6aca1bf5d02b3781aa854fabd2b69c790de74e17ecfec3cb6ac4bf
    login:
      type: object
      properties:
        email:
          type: string
          example: test@example.com
        password:
          type: string
          example: >-
            bed4efa1d4fdbd954bd3705d6a2a78270ec9a52ecfbfb010c61862af5c76af1761ffeb1aef6aca1bf5d02b3781aa854fabd2b69c790de74e17ecfec3cb6ac4bf
    login_response_success:
      type: object
      properties:
        access_token:
          type: string
        refresh_token:
          type: string
        token_type:
          type: string
          example: token
    logout:
      type: object
      properties:
        refresh_token:
          type: string
          example: Refresh token
    refresh:
      type: object
      properties:
        refresh_token:
          type: string
    refresh_response_success:
      type: object
      properties:
        access_token:
          type: string
    password-reset:
      type: object
      properties:
        email:
          type: string
          example: test@example.com
    id:
      type: string
    application-status:
      type: object
      properties:
        TargetAccount:
          type: string
        NewStatus:
          type: integer
    payment-status:
      type: object
      properties:
        TargetAccount:
          type: string
    update-role:
      type: object
      properties:
        TargetAccount:
          type: string
        NewRole:
          type: string
    new-token:
      type: object
      properties:
        tokens:
          type: object
          properties:
            access_token:
              type: string
            token_type:
              type: string
    camp-status:
      type: object
      properties:
        Example:
          type: string
    search:
      type: object
      properties:
        Name:
          type: string
    profile-get:
      type: object
      properties:
        success:
          type: boolean
          example: true
        profile:
          $ref: "#/components/schemas/profile"
    profile:
      type: object
      properties:
        personalId:
          type: string
        phoneNumber:
          type: string
        parentPhoneNumber:
          type: string
        bloodType:
          type: integer
        fbLink:
          type: string
        foodType:
          type: integer
        travelHistory:
          type: integer
        gender:
          type: integer
        clothesSize:
          type: integer
    update-profile-response:
      type: object
      properties:
        StoredData:
          $ref: "#/components/schemas/profile"
        InvalidData:
          type: object
          properties:
            personalId:
              type: string
              example: 無效的台灣身份證明文件
            phoneNumber:
              type: string
              example: 無效的台灣電話號碼
            parentPhoneNumber:
              type: string
              example: 無效的台灣電話號碼
            bloodType:
              type: string
              example: 無效的血型
            fbLink:
              type: string
              example: temp
            foodType:
              type: string
              example: 沒有此選項
            travelHistory:
              type: string
              example: 沒有此選項
            gender:
              type: string
              example: 沒有此選項
            clothesSize:
              type: string
              example: 沒有此選項
